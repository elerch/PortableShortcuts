using System;
using System.Diagnostics;
using System.IO;
using System.Windows;

namespace PortableShortcuts
{
    partial class DirectoryResources
    {
        private string _userStartMenuPath;
        public string UserStartMenuPath { 
            get {
                _userStartMenuPath = _userStartMenuPath ?? Environment.GetFolderPath(Environment.SpecialFolder.StartMenu) + @"\PortableShortcuts\";
                return _userStartMenuPath;
            }
        }

        private string FilenameForShortcut(string exeName) {
            return UserStartMenuPath + exeName + ".lnk";
        }

        public void AddEntry(object sender, EventArgs e)
        {
            var dir = GetDirectoryFromSender(sender);
            if (dir != null)
                AddEntry(dir.Name, dir.Path);
        }

        private void AddEntry(string name, string path)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentNullException("name");
            if (string.IsNullOrWhiteSpace(path))
                throw new ArgumentNullException("path");
            if (!System.IO.Directory.Exists(UserStartMenuPath))
                System.IO.Directory.CreateDirectory(UserStartMenuPath);
            using (var shortcut = new Shell.ShellShortcut(FilenameForShortcut(name))
                { 
                    Arguments = "",
                    Description = name + "@" + path + " (generated by PortableShortcuts)",
                    Path = path,
                    WindowStyle = ProcessWindowStyle.Normal,
                    WorkingDirectory = path.Substring(0, path.LastIndexOf('\\'))
                }) {
                shortcut.Save();
            }
        }

        public void RemoveEntry(object sender, EventArgs e)
        {
            var dir = GetDirectoryFromSender(sender);
            if (dir != null) 
                RemoveEntry(dir.Name);
        }

        private void RemoveEntry(string name)
        {
            try {
                File.Delete(FilenameForShortcut(name));
            }
            catch (IOException) { }
        }

        private static Directory GetDirectoryFromSender(object sender)
        {
            var cb = sender as FrameworkElement;
            if (cb == null) return null;
            var dir = cb.DataContext as Directory;
            return dir;
        }
    }
}
